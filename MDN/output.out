meta_material
Retrieving flag object for parameters
This is a meta-material dataset
reading from ensemble place
I am reading data from the: ../Simulated_DataSets/Meta_material_Neural_Simulator/dataIn
total number of training sample is 9000, the dimension of the feature is 8
total number of test sample is 1000
Making network now
This is inference mode, the ckpt is /home/sr365/Why_NA/MDN/models/retrain0meta_material
MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
retrain0meta_material
number of trainable parameters is :
6613292
Start eval now:
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=300, out_features=1000, bias=True)
    (1): Linear(in_features=1000, out_features=1000, bias=True)
    (2): Linear(in_features=1000, out_features=1000, bias=True)
    (3): Linear(in_features=1000, out_features=1000, bias=True)
    (4): Linear(in_features=1000, out_features=1000, bias=True)
    (5): Linear(in_features=1000, out_features=1000, bias=True)
    (6): Linear(in_features=1000, out_features=1000, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): BatchNorm1d(1000, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=1000, out_features=4, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=1000, out_features=256, bias=True)
    (mu): Linear(in_features=1000, out_features=32, bias=True)
  )
)
size of input torch.Size([1000, 1000])
self.sigma layer Linear(in_features=1000, out_features=256, bias=True)
size of sigma torch.Size([1000, 256])
size of mu torch.Size([1000, 32])
size of sigma =  torch.Size([1000, 4, 8, 8])
size of mu =  torch.Size([1000, 4, 8])
Evaluation finished
