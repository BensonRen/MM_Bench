None
Retrieving flag object for parameters
Your dataset is none of the artificial datasets
In read_data, flags.data_set = Yang_sim
shape of data_x (10000, 14)
shape of data_y (10000, 2000)
total number of training sample is 7500, the dimension of the feature is 14
total number of test sample is 2500
Making network now
This is inference mode, the ckpt is /home/sr365/MM_Bench/MDN/models/Yang_best_model
MDN(
  (linears): ModuleList(
    (0): Linear(in_features=2000, out_features=250, bias=True)
    (1): Linear(in_features=250, out_features=250, bias=True)
    (2): Linear(in_features=250, out_features=250, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(250, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(250, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(250, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=250, out_features=3, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=250, out_features=588, bias=True)
    (mu): Linear(in_features=250, out_features=42, bias=True)
  )
)
Yang_best_model
number of trainable parameters is :
786133
Start eval now:
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=2000, out_features=250, bias=True)
    (1): Linear(in_features=250, out_features=250, bias=True)
    (2): Linear(in_features=250, out_features=250, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(250, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(250, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(250, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=250, out_features=3, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=250, out_features=588, bias=True)
    (mu): Linear(in_features=250, out_features=42, bias=True)
  )
)
size of sigma =  torch.Size([1024, 3, 14, 14])
size of mu =  torch.Size([1024, 3, 14])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=2000, out_features=250, bias=True)
    (1): Linear(in_features=250, out_features=250, bias=True)
    (2): Linear(in_features=250, out_features=250, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(250, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(250, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(250, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=250, out_features=3, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=250, out_features=588, bias=True)
    (mu): Linear(in_features=250, out_features=42, bias=True)
  )
)
size of sigma =  torch.Size([1024, 3, 14, 14])
size of mu =  torch.Size([1024, 3, 14])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=2000, out_features=250, bias=True)
    (1): Linear(in_features=250, out_features=250, bias=True)
    (2): Linear(in_features=250, out_features=250, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(250, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(250, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(250, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=250, out_features=3, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=250, out_features=588, bias=True)
    (mu): Linear(in_features=250, out_features=42, bias=True)
  )
)
size of sigma =  torch.Size([452, 3, 14, 14])
size of mu =  torch.Size([452, 3, 14])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=2000, out_features=250, bias=True)
    (1): Linear(in_features=250, out_features=250, bias=True)
    (2): Linear(in_features=250, out_features=250, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(250, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(250, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(250, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=250, out_features=3, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=250, out_features=588, bias=True)
    (mu): Linear(in_features=250, out_features=42, bias=True)
  )
)
size of sigma =  torch.Size([1024, 3, 14, 14])
size of mu =  torch.Size([1024, 3, 14])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=2000, out_features=250, bias=True)
    (1): Linear(in_features=250, out_features=250, bias=True)
    (2): Linear(in_features=250, out_features=250, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(250, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(250, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(250, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=250, out_features=3, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=250, out_features=588, bias=True)
    (mu): Linear(in_features=250, out_features=42, bias=True)
  )
)
size of sigma =  torch.Size([1024, 3, 14, 14])
size of mu =  torch.Size([1024, 3, 14])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=2000, out_features=250, bias=True)
    (1): Linear(in_features=250, out_features=250, bias=True)
    (2): Linear(in_features=250, out_features=250, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(250, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(250, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(250, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=250, out_features=3, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=250, out_features=588, bias=True)
    (mu): Linear(in_features=250, out_features=42, bias=True)
  )
)
size of sigma =  torch.Size([452, 3, 14, 14])
size of mu =  torch.Size([452, 3, 14])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=2000, out_features=250, bias=True)
    (1): Linear(in_features=250, out_features=250, bias=True)
    (2): Linear(in_features=250, out_features=250, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(250, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(250, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(250, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=250, out_features=3, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=250, out_features=588, bias=True)
    (mu): Linear(in_features=250, out_features=42, bias=True)
  )
)
size of sigma =  torch.Size([1024, 3, 14, 14])
size of mu =  torch.Size([1024, 3, 14])
model in eval: MDN(
  (linears): ModuleList(
    (0): Linear(in_features=2000, out_features=250, bias=True)
    (1): Linear(in_features=250, out_features=250, bias=True)
    (2): Linear(in_features=250, out_features=250, bias=True)
  )
  (bn_linears): ModuleList(
    (0): BatchNorm1d(250, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (1): BatchNorm1d(250, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): BatchNorm1d(250, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (mdn): MDN(
    (pi): Sequential(
      (0): Linear(in_features=250, out_features=3, bias=True)
      (1): Softmax(dim=1)
    )
    (sigma): Linear(in_features=250, out_features=588, bias=True)
    (mu): Linear(in_features=250, out_features=42, bias=True)
  )
)